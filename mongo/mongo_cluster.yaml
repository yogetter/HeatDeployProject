heat_template_version: ocata

parameters:
  key_name:
    type: string
  flavor:
    type: string
  image:
    type: string
  private_net:
    type: string
  public_net:
    type: string
    default: ''
  slave_count:
    type: number
    label: instances count
    description: Number of instances

conditions:
  has_public_network:
    not:
      equals:
      - {get_param: public_net}
      - ''

resources:
################### Mogodb Repo ####################
  mongo_repo:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: |
        #!/bin/bash
        echo -e "[mongodb-org-4.0] \n\
        name=MongoDB Repository \n\
        baseurl=https://repo.mongodb.org/yum/amazon/2/mongodb-org/4.0/x86_64/ \n\
        gpgcheck=1 \n\
        enabled=1 \n\
        gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc" > /etc/yum.repos.d/mongodb-org-4.0.repo
        yum install -y mongodb-org
################### Mogodb Repo ####################

################### Mogodb cluster set ####################
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for hadoop cluster
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 27017
          port_range_max: 27017

  mongo_replica_set:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: |
        #!/bin/bash
        mongod --replSet "rs0" --bind_ip 0.0.0.0 --dbpath "/var/lib/mongo" --logpath /var/log/mongo.log --fork

  mongo_replica_set_master:
    type: OS::Heat::SoftwareConfig
    properties:
      inputs:
        - name: slave_ip
      group: script
      config: |
        #!/bin/bash
        mongod --replSet "rs0" --bind_ip 0.0.0.0 --dbpath "/var/lib/mongo" --logpath /var/log/mongo.log --fork
        echo "${slave_ip}" >> /root/slave_ip
        my_ip=$(ip addr show eth0 |  grep -o "[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}" | awk 'BEGIN {RS=""} {print $1}') 
        printf "$my_ip " >> /root/cluster
        index=0
        for i in $(cat /root/slave_ip | grep -o "[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}")
        do
             printf "$i " >> /root/cluster
        done
        read -r -a array <<< $(cat /root/cluster)
        for i in ${!array[@]}
        do
             printf "{ _id: $i, host: \"${array[i]}:27017\" } " >> /root/mongo
             if [ $((i+1)) -ne ${#array[@]} ]
             then
                printf "," >> /root/mongo
             fi
        done
        echo "rs.initiate( { _id : \"rs0\", members: [ $(cat /root/mongo) ] })" > /root/init.js
        mongo < /root/init.js >> /root/results
################### Mogodb cluster set ####################

################### ssh key no pawssord auth ####################
  key_add:
    type: OS::Heat::SoftwareConfig
    properties:
      inputs:
        - name: id_rsa_pub
        - name: user_name
      outputs:
        - name: hostname
      group: script
      config: |
        #!/bin/bash
        echo "${id_rsa_pub}" | su - $user_name -c 'tee -a .ssh/authorized_keys'
        hostname > ${heat_outputs_path}.hostname

  key_gen:
    type: OS::Heat::SoftwareConfig
    properties:
      outputs:
        - name: id_rsa_pub
      group: script
      config: |
        #!/bin/bash
        echo -e "\n" | ssh-keygen -t rsa -N "" 
        cat /root/.ssh/id_rsa.pub > ${heat_outputs_path}.id_rsa_pub
################### ssh key no pawssord auth ####################

################### apply ssh key no pawssord auth ####################
  do_key_gen:
    type: OS::Heat::SoftwareDeployment
    properties:
      input_values:
        user_name: fedora
      config:
        get_resource: key_gen
      server:
        get_resource: master_server

  do_key_add:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      input_values:
        user_name: fedora
        id_rsa_pub:
          get_attr: [do_key_gen, id_rsa_pub]
      config:
        get_resource: key_add
      servers:
        get_attr: [slave_cluster, attributes, slave_id]
################### apply ssh key no pawssord auth ####################

################### apply Mogodb Repo and install ####################
  do_add_slave_mongo_repo:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      config:
        get_resource: mongo_repo 
      servers:
        get_attr: [slave_cluster, attributes, slave_id]

  do_add_master_mongo_repo:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: mongo_repo 
      server:
        get_resource: master_server
################### apply Mogodb Repo and install ####################

################### run Mogodb ####################
  do_run_slave_mongo:
    type: OS::Heat::SoftwareDeploymentGroup
    depends_on: do_add_slave_mongo_repo
    properties:
      config:
        get_resource: mongo_replica_set
      servers:
        get_attr: [slave_cluster, attributes, slave_id]

  do_run_master_mongo:
    type: OS::Heat::SoftwareDeployment
    depends_on: do_add_master_mongo_repo
    properties:
      input_values:
        slave_ip: 
           get_attr: [slave_cluster, attributes, slave_ip]
      config:
        get_resource: mongo_replica_set_master
      server:
        get_resource: master_server
################### run Mogodb ####################

  slave_cluster:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: slave_count }
      resource_def:
        type: slave.yaml

  master_server:
    type: OS::Nova::Server
    properties:
      image:
        get_param: image
      flavor:
        get_param: flavor
      key_name:
        get_param: key_name
      networks:
      - port: {get_resource: server_port }
      user_data_format: SOFTWARE_CONFIG

  server_port:
    type: OS::Neutron::Port
    depends_on: security_group
    properties:
      network_id: { get_param: private_net }
      security_groups: [{ get_resource: security_group }]

  server_floating_ip:
    type: OS::Neutron::FloatingIP
    condition: has_public_network
    properties:
      floating_network_id: { get_param: public_net }
      port_id: { get_resource: server_port }


